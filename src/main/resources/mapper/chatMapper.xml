<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Chat">
    <select id="getChatFriends" parameterType="int" resultType="chatUser">
        <![CDATA[
        SELECT
            DISTINCT u.id,
            u.fileId,
            f.status,
            cs.unreadCount,
            u.nickName,
            u.gender,
            m.mbti AS mbti,
            IFNULL(cs.content, '') AS lastChatContent,
            CASE
                WHEN TIMESTAMPDIFF(MINUTE, u.lastLogin, NOW()) < 60 THEN
                    CONCAT(
                        IF(TIMESTAMPDIFF(MINUTE, u.lastLogin, NOW()) < 1, 1, TIMESTAMPDIFF(MINUTE, u.lastLogin, NOW())),
                        '분 전'
                    )
                WHEN TIMESTAMPDIFF(HOUR, u.lastLogin, NOW()) < 24 THEN
                    CONCAT(TIMESTAMPDIFF(HOUR, u.lastLogin, NOW()), '시간 전')
                WHEN TIMESTAMPDIFF(DAY, u.lastLogin, NOW()) < 7 THEN
                    CONCAT(TIMESTAMPDIFF(DAY, u.lastLogin, NOW()), '일 전')
                WHEN TIMESTAMPDIFF(WEEK, u.lastLogin, NOW()) < 4 THEN
                    CONCAT(TIMESTAMPDIFF(WEEK, u.lastLogin, NOW()), '주 전')
                WHEN TIMESTAMPDIFF(MONTH, u.lastLogin, NOW()) < 12 THEN
                    CONCAT(TIMESTAMPDIFF(MONTH, u.lastLogin, NOW()), '달 전')
                ELSE
                    CONCAT(TIMESTAMPDIFF(YEAR, u.lastLogin, NOW()), '년 전')
            END AS lastLoginTime,
            cs.sendAt AS lastChatTime
        FROM user AS u
        JOIN mbti AS m
            ON m.id = u.mbtiId
        JOIN friends AS f
            ON (
                (f.requestUserId = #{userId} AND f.responseUserId = u.id)
                OR (f.responseUserId = #{userId} AND f.requestUserId = u.id)
            )
            AND f.status >= 1 AND u.status != -1
            AND CASE
                WHEN f.status = 3 THEN f.responseUserId = #{userId}
                ELSE 1=1
                END
        LEFT JOIN (
            SELECT
                CASE
                    WHEN c.requestUserId = #{userId}
                    THEN c.responseUserId
                    ELSE c.requestUserId
                END AS friendId,
                c.sendAt,
                c.content,
                SUM(
                    CASE
                        WHEN c.responseUserId = #{userId} AND c.isRead = 0
                        THEN 1
                        ELSE 0
                    END
                ) OVER (
                    PARTITION BY
                        CASE
                            WHEN c.requestUserId = #{userId}
                            THEN c.responseUserId
                            ELSE c.requestUserId
                        END
                ) AS unreadCount,
                ROW_NUMBER() OVER (
                    PARTITION BY
                        CASE
                            WHEN c.requestUserId = #{userId}
                            THEN c.responseUserId
                            ELSE c.requestUserId
                        END
                    ORDER BY
                        c.sendAt DESC
                ) AS rn
            FROM chat AS c
            WHERE
                (c.requestUserId = #{userId} OR c.responseUserId = #{userId}) AND c.status = 1
        ) AS cs
            ON cs.friendId = u.id AND cs.rn = 1
        ORDER BY
            f.status ASC,
            lastChatTime DESC,
            u.nickName ASC;
        ]]>
    </select>
    <select id="myLastMessage" parameterType="chatMessage" resultType="chatMessage">
        SELECT * FROM chat WHERE (requestUserId = #{requestUserId} AND responseUserId = #{responseUserId})
        ORDER BY id DESC LIMIT 1
    </select>
    <select id="getChatMessages" parameterType="chatMessage" resultType="chatMessage">
        SELECT * FROM chat WHERE
        (
        (requestUserId = #{requestUserId} AND responseUserId = #{responseUserId})
        OR
        (requestUserId = #{responseUserId} AND responseUserId = #{requestUserId})
        )
        AND status = 1;
    </select>
    <update id="readChatMessage" parameterType="chatMessage">
        <![CDATA[
            UPDATE chat SET isRead = 1 WHERE requestUserId = #{requestUserId} AND responseUserId = #{responseUserId} AND id <= #{id} AND isRead = 0;
        ]]>
    </update>
    <insert id="sendChatMessage" parameterType="chatMessage">
        INSERT INTO chat (requestUserId, responseUserId, content) VALUES (#{requestUserId}, #{responseUserId}, #{content});
    </insert>
    <insert id="requestChat" parameterType="chatMessage">
        INSERT INTO friends (requestUserId, responseUserId, status, requestedAt)
        VALUES (#{requestUserId}, #{responseUserId}, 3, NOW())
        ON DUPLICATE KEY UPDATE
        status = IF(status=1 OR status=2, status, 3),
        requestedAt = IF(status=1 OR status=2, requestedAt, NOW()),
        responsedAt = NULL;
    </insert>
    <update id="acceptChat" parameterType="chatMessage">
        UPDATE friends SET status = 2 WHERE (requestUserId = #{requestUserId} AND responseUserId = #{responseUserId})
        OR
        (requestUserId = #{responseUserId} AND responseUserId = #{requestUserId});
    </update>
    <update id="declineChat" parameterType="chatMessage">
        UPDATE friends SET status = -1 WHERE (requestUserId = #{requestUserId} AND responseUserId = #{responseUserId})
        OR
        (requestUserId = #{responseUserId} AND responseUserId = #{requestUserId});
    </update>
    <select id="searchUserList" parameterType="chatUser" resultType="chatUser">
        <![CDATA[
        SELECT
        u.id,
        u.fileId,
        IFNULL(f.status, -1) as status,
        u.nickName,
        m.mbti AS mbti
        FROM user AS u
        JOIN mbti AS m
        ON m.id = u.mbtiId
        LEFT JOIN friends AS f
        ON (
        (f.requestUserId = #{id} AND f.responseUserId = u.id)
        OR (f.responseUserId = #{id} AND f.requestUserId = u.id)
        )
        WHERE (f.status < 1 OR f.status is NULL) AND (u.id != #{id} AND u.status != -1)
        AND u.nickName LIKE CONCAT('%', #{nickName}, '%')
        ORDER BY
        u.nickName ASC;
        ]]>
    </select>
    <select id="getChatFriendById" parameterType="chatMessage" resultType="chatUser">
        <![CDATA[
        SELECT
            DISTINCT u.id,
            u.fileId,
            f.status,
            cs.unreadCount,
            u.nickName,
            u.gender,
            m.mbti AS mbti,
            IFNULL(cs.content, '') AS lastChatContent,
            CASE
                WHEN TIMESTAMPDIFF(MINUTE, u.lastLogin, NOW()) < 60 THEN
                    CONCAT(
                        IF(TIMESTAMPDIFF(MINUTE, u.lastLogin, NOW()) < 1, 1, TIMESTAMPDIFF(MINUTE, u.lastLogin, NOW())),
                        '분 전'
                    )
                WHEN TIMESTAMPDIFF(HOUR, u.lastLogin, NOW()) < 24 THEN
                    CONCAT(TIMESTAMPDIFF(HOUR, u.lastLogin, NOW()), '시간 전')
                WHEN TIMESTAMPDIFF(DAY, u.lastLogin, NOW()) < 7 THEN
                    CONCAT(TIMESTAMPDIFF(DAY, u.lastLogin, NOW()), '일 전')
                WHEN TIMESTAMPDIFF(WEEK, u.lastLogin, NOW()) < 4 THEN
                    CONCAT(TIMESTAMPDIFF(WEEK, u.lastLogin, NOW()), '주 전')
                WHEN TIMESTAMPDIFF(MONTH, u.lastLogin, NOW()) < 12 THEN
                    CONCAT(TIMESTAMPDIFF(MONTH, u.lastLogin, NOW()), '달 전')
                ELSE
                    CONCAT(TIMESTAMPDIFF(YEAR, u.lastLogin, NOW()), '년 전')
            END AS lastLoginTime,
            cs.sendAt AS lastChatTime
        FROM user AS u
        JOIN mbti AS m
            ON m.id = u.mbtiId
        JOIN friends AS f
            ON (
                (f.requestUserId = #{requestUserId} AND f.responseUserId = u.id)
                OR (f.responseUserId = #{requestUserId} AND f.requestUserId = u.id)
            )
            AND f.status >= 1 AND u.status != -1
        LEFT JOIN (
            SELECT
                CASE
                    WHEN c.requestUserId = #{requestUserId}
                    THEN c.responseUserId
                    ELSE c.requestUserId
                END AS friendId,
                c.sendAt,
                c.content,
                SUM(
                    CASE
                        WHEN c.responseUserId = #{requestUserId} AND c.isRead = 0
                        THEN 1
                        ELSE 0
                    END
                ) OVER (
                    PARTITION BY
                        CASE
                            WHEN c.requestUserId = #{requestUserId}
                            THEN c.responseUserId
                            ELSE c.requestUserId
                        END
                ) AS unreadCount,
                ROW_NUMBER() OVER (
                    PARTITION BY
                        CASE
                            WHEN c.requestUserId = #{requestUserId}
                            THEN c.responseUserId
                            ELSE c.requestUserId
                        END
                    ORDER BY
                        c.sendAt DESC
                ) AS rn
            FROM chat AS c
            WHERE
                (c.requestUserId = #{requestUserId} OR c.responseUserId = #{requestUserId}) AND c.status = 1
        ) AS cs
            ON cs.friendId = u.id AND cs.rn = 1
        WHERE u.id = #{responseUserId}
        ORDER BY
            f.status ASC,
            lastChatTime DESC,
            u.nickName ASC;
        ]]>
    </select>
</mapper>