<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="Group">
    <!-- 그룹 생성 -->
    <insert id="createGroup" parameterType="group" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `group` (leader, title, description, location, maxUserNum, fileId)
        VALUES (#{leader}, #{title}, #{description}, #{location}, #{maxUserNum}, #{fileId});
    </insert>

    <!-- 그룹 전체 조회 (status = 1일때만 조회)-->
    <select id="findAll" resultType="group">
        SELECT * FROM `group`
        WHERE status = 1
        ORDER BY createdAt DESC;  
    </select>

    <!-- 그룹 검색 조회 -->
    <select id="searchByKeyword" parameterType="string" resultType="group">
        SELECT * FROM `group`
        WHERE status = 1
            AND (title LIKE CONCAT('%', #{keyword}, '%')
                OR location LIKE CONCAT('%', #{keyword}, '%'))
        ORDER BY createdAt DESC;
    </select>

    <!-- 그룹 상세 조회 -->
    <select id="findById" parameterType="int" resultType="group">
        SELECT * FROM `group`
        WHERE id = #{id}
    </select>

    <!-- 그룹 수정 -->
    <update id="update" parameterType="group">
        UPDATE `group`
        SET title = #{title},
        description = #{description},
        location = #{location},
        maxUserNum = #{maxUserNum}
        WHERE id = #{id};
    </update>

    <!-- 그룹 삭제 (status → -1로 처리) -->
    <update id="delete" parameterType="int">
        UPDATE `group`
        SET status = -1
        WHERE id = #{id};
    </update>

    <!-- 리더의 비활성(삭제됨) 그룹 1건 찾기 (status = -1) -->
    <select id="findInactiveGroupIdByLeader" parameterType="int" resultType="int">
        SELECT id
        FROM `group`
        WHERE leader = #{leader}
        AND status = -1
        ORDER BY id DESC
        LIMIT 1
    </select>

    <!-- 삭제되었던 그룹을 '새로 만든 것처럼' 재활성화 -->
    <update id="reactivateGroup" parameterType="map">
        UPDATE `group`
        SET title      = #{title},
        description= #{description},
        location   = #{location},
        maxUserNum = #{maxUserNum},
        fileId     = #{fileId},
        status     = 1,
        createdAt  = CURRENT_TIMESTAMP
        WHERE id = #{id};
    </update>

    <!-- 리더의 활성(=status=1) 모임 개수 -->
    <select id="countActiveByLeader" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM `group`
        WHERE leader = #{leader}
        AND status = 1
    </select>

    <!-- 모임 일정 관련 -->
    <insert id="createGroupSchedule" parameterType="groupSchedule">
        INSERT INTO groupschedule(scheduleLeader, groupId, title, description,startTime,endTime,maxUserNum, status)
        VALUES(#{scheduleLeader},#{groupId},#{title},#{description},#{startTime},#{endTime},#{maxUserNum}, 0);
    </insert>

    <select id="getGroupScheduleByGroupId" parameterType="int" resultType="groupSchedule">
        <![CDATA[
        SELECT *
        FROM groupschedule
        WHERE groupId = #{groupId}
        ORDER BY (startTime > NOW()) ASC,
        startTime DESC;
        ]]>
    </select>

    <select id="getGroupScheduleDetail" parameterType="int" resultType="groupSchedule">
        SELECT * FROM groupschedule WHERE id=#{groupScheduleId};
    </select>

    <!-- 대기(0) + 수락(1) 리스트, 대기 먼저 보이게 정렬 -->
    <select id="getScheduleGroupByGroup" parameterType="int" resultType="userSchedule">
        SELECT *
        FROM userschedule
        WHERE groupScheduleId = #{groupScheduleId}
        AND status IN (0, 1)
        ORDER BY status ASC, userId ASC;
    </select>

    <!-- 수락자 리스트
    <select id="getApprovedByGroupSchedule" parameterType="int" resultType="userSchedule">
        SELECT *
        FROM userschedule
        WHERE groupScheduleId = #{groupScheduleId}
        AND status = 1
    </select>-->

    <update id="acceptSchedule" parameterType="schedule">
        UPDATE userschedule
        SET status = 1
        WHERE userId = #{userId}
        AND groupScheduleId = #{groupScheduleId}
        AND status = 0
    </update>

    <update id="refuseSchedule" parameterType="schedule">
        UPDATE userschedule
        SET status = -1
        WHERE userId = #{userId}
        AND groupScheduleId = #{groupScheduleId}
        AND status = 0
    </update>

    <update id="endRecruit" parameterType="int">
        UPDATE groupschedule SET status = 1
        WHERE id = #{id};
    </update>

    <select id="findGroupIdByScheduleId" parameterType="int" resultType="int">
        SELECT groupId
        FROM groupschedule
        WHERE id = #{groupScheduleId}
    </select>

    <select id="getPaginationGroups" resultType="group">
        SELECT * FROM `group`
        ORDER BY createdAt DESC
        LIMIT #{limit} OFFSET #{offset};
    </select>
    <select id="searchByPaginationGroups" resultType="group">
        SELECT * FROM `group`
        WHERE (title LIKE CONCAT('%', #{keyword}, '%')
        OR location LIKE CONCAT('%', #{keyword}, '%'))
        ORDER BY createdAt DESC
        LIMIT #{limit} OFFSET #{offset};
    </select>

</mapper>